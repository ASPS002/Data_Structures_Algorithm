//https://www.codingninjas.com/studio/problems/k-th-perfect-number-in-range_2569269?leftPanelTab=0
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 3000005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
ll dp[65][3][3][2][2];
ll spl_number(ll idx, ll pp, ll p, ll is_special, ll f_val, ll lthan, ll sum)
{
   if (idx == -1)
   {
      if (is_special)
         return 1;
      return 0;
   }
   if (dp[idx][pp][p][is_special][f_val] != -1)
      return dp[idx][pp][p][is_special][f_val];
   ll ans = 0;
   if (f_val == 1)
   {
      if (lthan & (1ll << idx))
      {
         if (sum + (1ll << idx) <= lthan)
         {
            if (idx <= 58 && pp == 1 && p == 0)
            {
               ans += spl_number(idx - 1, p, 1, 1, 1, lthan, sum + (1ll << idx));
            }
            else
            {
               ans += spl_number(idx - 1, p, 1, is_special, 1, lthan, sum + (1ll << idx));
            }
         }
         ans += spl_number(idx - 1, p, 0, is_special, 0, lthan, sum);
      }
      else
      {
         ans += spl_number(idx - 1, p, 0, is_special, 1, lthan, sum);
      }
   }
   else
   {
      if (sum + (1ll << idx) <= lthan)
      {
         if (idx <= 58 && pp == 1 && p == 0)
         {
            ans += spl_number(idx - 1, p, 1, 1, 0, lthan, sum + (1ll << idx));
         }
         else
         {
            ans += spl_number(idx - 1, p, 1, is_special, 0, lthan, sum + (1ll << idx));
         }
      }
      ans += spl_number(idx - 1, p, 0, is_special, 0, lthan, sum);
   }

   return dp[idx][pp][p][is_special][f_val] = ans;
}
int kthSpecialNumber(int l, int r, int k)
{
   mem1(dp);
   ll val = l;
   ll below_l_special = spl_number(60, 2, 2, 0, 1, val - 1, 0);
   ll lw = l, hi = r;
   while (lw <= hi)
   {
      mem1(dp);
      ll mid = (lw + hi) / 2;
      ll below_mid_special = spl_number(60, 2, 2, 0, 1, mid, 0);
      if (below_mid_special - below_l_special >= k)
      {
         hi = mid - 1;
      }
      else
      {
         lw = mid + 1;
      }
   }
   mem1(dp);
   if (lw > r)
      return -1;
   return lw;
}
void solve()
{
   int l, r, k;
   cin >> l >> r >> k;
   cout << kthSpecialNumber(l, r, k) << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   cin >> kk;
   while (kk--)
   {
      solve();
   }
}
