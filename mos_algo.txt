#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 100005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
struct query
{

	ll l, r, idx;
	bool operator<(query const &other)
	{
		if (l / 555 != other.l / 555)
		{

			return l / 555 < (other.l) / 555;
		}
		return (l / 555 & 1) ? (r < other.r) : other.r < r;
	}
} q[N];
void add(ll x)
{
	//do
	if ((x ^ k) < N1)
		cur += cnt[x ^ k];
	cnt[x]++;
}
void sub(ll y)
{
	//do
	cnt[x]--;
	if ((x ^ k) < N1)
		cur -= cnt[x ^ k];
}
void solve()
{
	ll m;
	ll lo = 0, hi = -1;
	sort(q, q + m);
	for (ll i = 0; i < m; i++)
	{
		while (lo > q[i].l)
		{
			lo--;
			add(a[lo]);
		}
		while (hi < q[i].r)
		{
			hi++;
			add(a[hi]);
		}
		while (lo < q[i].l)
		{
			sub(a[lo]);
			lo++;
		}
		while (hi > q[i].r)
		{

			sub(a[hi]);
			hi--;
		}
		ans[q[i].idx] = cur;
	}
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}