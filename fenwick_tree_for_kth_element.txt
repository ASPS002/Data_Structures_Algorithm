//multiset codeforces d problem edu round
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 2000005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
    ll res = 1;

    x = x % p;

    if (x == 0)
        return 0;
    while (y > 0)
    {

        if (y & 1)
            res = (res * x) % p;

        y = y >> 1;
        x = (x * x) % p;
    }

    return res;
}
ll fn[N];
void update(ll i, ll add)
{
    while (i > 0 && i < N)
    {
        fn[i] += add;
        i = i + (i & -i);
    }
}
ll sum(ll i)
{
    ll s = 0;
    while (i > 0)
    {
        s = s + fn[i];
        i = i - (i & -i);
    }
    return s;
}
ll lower_bound(ll val)
{
    ll psum = 0, cur = 0;
    for (ll i = log2(N - 2); i >= 0; i--)
    {
        if (fn[cur + (1ll << i)] + psum < val)
        {
            psum += fn[cur + (1ll << i)];
            cur += (1ll << i);
        }
    }
    return cur + 1;
}
void solve()
{
    ll n;
    cin >> n;
    ll q;
    cin >> q;
    vector<ll> a(n + 1);
    for (ll i = 1; i <= n; i++)
    {
        cin >> a[i];
        update(a[i], 1);
    }

    for (ll i = 0; i < q; i++)
    {
        ll x;
        cin >> x;
        if (x > 0)
        {
            update(x, 1);
        }
        else
        {
            x = abs(x);
            ll idx = lower_bound(x);//the concept can be used to find kth element in an multiset
            update(idx, -1);
        }
    }
    for (ll i = 1; i <= n; i++)
    {
        if (sum(i) - sum(i - 1) > 0)
        {
            cout << i << endl;
            return;
        }
    }
    cout << 0 << endl;
    return;
}
int main()
{
    speed;
    ll kk;
    kk = 1;
    // cin >> kk;
    while (kk--)
    {
        solve();
    }
}