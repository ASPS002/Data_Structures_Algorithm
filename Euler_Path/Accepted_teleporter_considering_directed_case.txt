https://cses.fi/problemset/task/1693/
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 200005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;
 
   x = x % p;
 
   if (x == 0)
      return 0;
   while (y > 0)
   {
 
      if (y & 1)
         res = (res * x) % p;
 
      y = y >> 1;
      x = (x * x) % p;
   }
 
   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;
 
   if (x == 0)
      return 0;
   while (y > 0)
   {
 
      if (y & 1)
         res = (res * x);
 
      y = y >> 1;
      x = (x * x);
   }
 
   return res;
}
multiset<ll> adj[N];
ll in[N], out[N];
void solve()
{
 
   ll n, m;
   cin >> n >> m;
   for (ll i = 1; i <= m; i++)
   {
      ll x, y;
      cin >> x >> y;
      adj[x].insert(y);
      in[y]++;
      out[x]++;
   }
   ll v1 = -1, v2 = -1, bad = 1;
   for (ll i = 1; i <= n; i++)
   {
 
      if (in[i] != out[i])
      {
         if (v1 == -1 && in[i] < out[i] && out[i] - in[i] == 1)
         {
            v1 = i;
         }
         else if (v2 == -1 && in[i] > out[i] && in[i] - out[i] == 1)
         {
            v2 = i;
         }
         else
         {
            bad = -1;
         }
      }
   }
   if (bad == -1 || v1 != 1 || v2 != n)
   {
      cout << "IMPOSSIBLE" << endl;
      return;
   }
   if (v1 != -1 && v2 != -1)
   {
      adj[v2].insert(v1);
   }
   stack<ll> st;
   st.push(1);
   vector<ll> ans;
   while (!st.empty())
   {
      ll v = st.top();
 
      if (adj[v].size())
      {
         ll u = *adj[v].begin();
         adj[v].erase(adj[v].begin());
         st.push(u);
      }
      else
      {
 
         ans.pb(v);
         st.pop();
      }
   }
   for (ll i = 1; i <= n; i++)
   {
      if (adj[i].size()) // disconnected graph
      {
         bad = -1;
      }
   }
   reverse(all(ans));
   if (v1 != -1 && v2 != -1)
   {
 
      for (ll i = 0; i + 1 < ans.size(); i++)
      {
         if ((ans[i] == v2 && ans[i + 1] == v1))
         {
            vector<ll> res;
            for (ll j = i + 1; j < ans.size(); ++j)
               res.push_back(ans[j]);
            for (ll j = 1; j <= i; ++j)
               res.push_back(ans[j]);
            ans = res;
            break;
         }
      }
   }
   else
   {
      cout << "IMPOSSIBLE" << endl;
      return;
   }
   if (bad == -1 || (in[n] == 0 && out[n] == 0))
   {
      cout << "IMPOSSIBLE" << endl;
      return;
   }
   for (auto it : ans)
   {
      cout << it << " ";
   }
   cout << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}