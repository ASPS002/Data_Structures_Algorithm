#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 200005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
multiset<ll> adj[N];
void solve()
{
   ll n, m;
   cin >> n >> m;
   for (ll i = 1; i <= m; i++)
   {
      ll x, y;
      cin >> x >> y;
      adj[x].insert(y);
      adj[y].insert(x);
   }
   ll v1 = -1, v2 = -1;
   bool bad = true;
   for (ll i = 1; i <= n; i++)
   {
      if (adj[i].size() % 2)
      {
         if (v1 == -1)
            v1 = i;
         else if (v2 == -1)
            v2 = i;
         else
         {
            bad = false;
         }
      }
   }
   if (!bad || v1 != 1 || v2 != n)
   {
      cout << "IMPOSSIBLE" << endl;
      return;
   }
   adj[v1].insert(v2);
   adj[v2].insert(v1);
   vector<ll> res;
   stack<ll> st;
   st.push(1);
   while (st.size())
   {
      ll v = st.top();
      if (adj[v].size())
      {
         auto it = *adj[v].begin();
         adj[it].erase(adj[it].find(v));
         adj[v].erase(adj[v].find(it));
         st.push(it);
      }
      else
      {
         st.pop();
         res.push_back(v);
      }
   }
   for (ll i = 0; i + 1 < res.size(); i++)
   {
      if ((res[i] == v1 && res[i + 1] == v2) || ((res[i] == v2 && res[i + 1] == v1)))
      {
         vector<ll> res2;
         for (ll j = i + 1; j < res.size(); j++)
            res2.push_back(res[j]);
         for (ll j = 1; j <= i; j++) // starting from 1 because because last element of res will be same as 1st
            res2.push_back(res[j]);
         res = res2;
         break;
      }
   }
   for (ll i = 1; i <= n; i++)
   {
      if (adj[i].size())
      {
         cout << "IMPOSSIBLE" << endl;
         return;
      }
   }
   if(res[0]==n)
   {
      reverse(all(res));
   }
   for (auto it : res)
   {
      cout << it << " ";
   }
   cout << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}