https://codeforces.com/contest/384/problem/E

#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 200005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;
 
   x = x % p;
 
   if (x == 0)
      return 0;
   while (y > 0)
   {
 
      if (y & 1)
         res = (res * x) % p;
 
      y = y >> 1;
      x = (x * x) % p;
   }
 
   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;
 
   if (x == 0)
      return 0;
   while (y > 0)
   {
 
      if (y & 1)
         res = (res * x);
 
      y = y >> 1;
      x = (x * x);
   }
 
   return res;
}
ll in[N];
ll dis[N];
ll out[N];
ll timer = 0;
vector<ll> adj[N];
ll a[N];
ll t[4 * N];
ll t2[4 * N];
ll lvl[N];
void build(ll v, ll tl, ll tr)
{
   if (tl == tr)
   {
      t[v] = a[dis[tl]];
      t2[v] = a[dis[tl]];
   }
   else
   {
      ll tm = (tl + tr) / 2;
      build(2 * v, tl, tm);
      build(2 * v + 1, tm + 1, tr);
      t[v] = 0;
   }
}
void update(ll v, ll tl, ll tr, ll l, ll r, ll add)
{
   if (l > r)
      return;
   if (l == tl && r == tr)
   {
      t[v] += add;
      return;
   }
   ll tm = (tl + tr) / 2;
   update(2 * v, tl, tm, l, min(tm, r), add);
   update(2 * v + 1, tm + 1, tr, max(l, tm + 1), r, add);
   return;
}
ll get(ll v, ll tl, ll tr, ll pos)
{
   if (tl == tr)
      return t[v];
 
   ll tm = (tl + tr) / 2;
 
   if (pos <= tm)
   {
      return t[v] + get(2 * v, tl, tm, pos);
   }
   else
   {
      return t[v] + get(2 * v + 1, tm + 1, tr, pos);
   }
}
void update2(ll v, ll tl, ll tr, ll l, ll r, ll add)
{
   if (l > r)
      return;
   if (l == tl && r == tr)
   {
      t2[v] += add;
      return;
   }
   ll tm = (tl + tr) / 2;
   update2(2 * v, tl, tm, l, min(tm, r), add);
   update2(2 * v + 1, tm + 1, tr, max(l, tm + 1), r, add);
   return;
}
ll get2(ll v, ll tl, ll tr, ll pos)
{
   if (tl == tr)
      return t2[v];
 
   ll tm = (tl + tr) / 2;
 
   if (pos <= tm)
   {
      return t2[v] + get2(2 * v, tl, tm, pos);
   }
   else
   {
      return t2[v] + get2(2 * v + 1, tm + 1, tr, pos);
   }
}
void dfs(ll v, ll p)
{
   in[v] = ++timer;
   dis[timer] = v;
   for (auto it : adj[v])
   {
      if (it != p)
      {
         lvl[it] = lvl[v] + 1;
         dfs(it, v);
      }
   }
   out[v] = timer;
}
void solve()
{
   ll n, m;
   cin >> n >> m;
   for (ll i = 1; i <= n; i++)
   {
      cin >> a[i];
   }
   for (ll i = 1; i < n; i++)
   {
      ll x, y;
      cin >> x >> y;
      adj[x].pb(y);
      adj[y].pb(x);
   }
   lvl[1] = 1;
   dfs(1, -1);
   build(1, 1, n);
   // from dis[in[v]]......dis[out[v]] contains the subtree of v
   // for (ll i = 1; i <= n; i++)
   // {
   //    cout << dis[i] << " ";
   // }
   // cout << endl;
   // for (ll i = 1; i <= n; i++)
   // {
   //    cout << in[i] << " ";
   // }
   // cout << endl;
   // for (ll i = 1; i <= n; i++)
   // {
   //    cout << out[i] << " ";
   // }
   // cout << endl;
   for (ll i = 1; i <= m; i++)
   {
      ll type;
      cin >> type;
      if (type == 1)
      {
         ll x, val;
         cin >> x >> val;
         ll l = in[x];
         ll r = out[x];
         if (lvl[x] % 2)
         {
            update(1, 1, n, l, r, val);
            update2(1, 1, n, l, r, -val);
         }
         else
         {
            update2(1, 1, n, l, r, val);
            update(1, 1, n, l, r, -val);
         }
      }
      else
      {
         ll x;
         cin >> x;
         if (lvl[x] % 2)
         {
            cout << get(1, 1, n, in[x]) << endl;
         }
         else
         {
            cout << get2(1, 1, n, in[x]) << endl;
         }
      }
   }
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}