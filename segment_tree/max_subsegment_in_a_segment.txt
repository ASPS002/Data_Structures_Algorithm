#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
struct data
{
	ll pre, suf, res, sum;
};
data t[4 * N];
data make_data(ll val)
{
	data res;
	res.sum = val;
	res.pre = max(0ll, val);
	res.suf = max(0ll, val);
	res.res = max(0ll, val);
	return res;
}
data combine(data d1, data d2)
{
	data res;
	res.sum = d1.sum + d2.sum;
	res.pre = max(d1.pre, d1.sum + d2.pre);
	res.suf = max(d1.suf + d2.sum, d2.suf);
	res.res = max({d1.res, d2.res, d1.suf + d2.pre});
	return res;
}
data query(ll v, ll tl, ll tr, ll l, ll r)
{
	if (l > r)
		return make_data(0);
	if (l == tl && r == tr)
		return t[v];
	ll tm = (tl + tr) / 2;
	return combine(query(v * 2, tl, tm, l, min(r, tm)),
				   query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
}
void update(ll v, ll tl, ll tr, ll pos, ll new_val)
{
	if (tl == tr)
	{
		t[v] = make_data(new_val);
	}
	else
	{
		int tm = (tl + tr) / 2;
		if (pos <= tm)
			update(v * 2, tl, tm, pos, new_val);
		else
			update(v * 2 + 1, tm + 1, tr, pos, new_val);
		t[v] = combine(t[v * 2], t[v * 2 + 1]);
	}
}
void build(vector<ll> &a, ll v, ll tl, ll tr)
{
	if (tl == tr)
	{
		t[v] = make_data(a[tl]);
	}
	ll tm = (tl + tr) / 2;
	build(a, 2 * v, tl, tm);
	build(a, 2 * v + 1, tm + 1, tr);
	t[v] = combine(t[v * 2], t[v * 2 + 1]);
}
void solve()
{
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}