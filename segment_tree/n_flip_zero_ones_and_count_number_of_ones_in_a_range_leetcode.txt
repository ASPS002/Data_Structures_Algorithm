//https://leetcode.com/problems/handling-sum-queries-after-update/
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 200005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
ll t1[4 * N];
ll lazy1[4 * N];
void push(ll v, ll l, ll r, ll m)
{
   if (lazy1[v])
   {
      t1[2 * v] = (m - l + 1) - t1[2 * v];
      t1[2 * v + 1] = (r - m) - t1[2 * v + 1];
      lazy1[2 * v] = !lazy1[2 * v];
      lazy1[2 * v + 1] = !lazy1[2 * v + 1];
      lazy1[v] = 0;
   }
}
void build1(ll v, ll tl, ll tr, vector<int> &nums1)
{
   if (tl == tr)
   {
      t1[v] = nums1[tl];
   }
   else
   {
      ll tm = (tl + tr) / 2;
      build1(2 * v, tl, tm, nums1);
      build1(2 * v + 1, tm + 1, tr, nums1);
      t1[v] = t1[2 * v] + t1[2 * v + 1];
   }
}
void update1(ll v, ll tl, ll tr, ll l, ll r)
{
   if (l > r)
      return;
   if (l == tl && r == tr)
   {
      t1[v] = (r - l + 1) - t1[v];
      lazy1[v] = !lazy1[v];
   }
   else
   {

      ll tm = (tl + tr) / 2;
      push(v, tl, tr, tm);
      update1(2 * v, tl, tm, l, min(r, tm));
      update1(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);
      t1[v] = t1[2 * v] + t1[2 * v + 1];
   }
}

vector<long long> handleQuery(vector<int> &nums1, vector<int> &nums2, vector<vector<int>> &queries)
{
   ll n = nums2.size();
   build1(1, 0, n - 1, nums1);
   vector<ll> ans;
   ll sum = 0;
   for (ll i = 0; i < n; i++)
   {
      sum += nums2[i];
   }
   for (ll i = 0; i < queries.size(); i++)
   {
      ll type = queries[i][0];
      ll x = queries[i][1];
      ll y = queries[i][2];
      if (type == 1)
      {
         update1(1, 0, n - 1, x, y);
      }
      else if (type == 2)
      {
         ll one = t1[1];
         sum += one * x;
      }
      else
      {
         ans.push_back(sum);
      }
   }
   return ans;
}
void solve()
{
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}
