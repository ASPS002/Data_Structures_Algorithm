#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll t[4 * N];
ll lazy[4 * N];
void push(ll v)
{
	t[v * 2] += lazy[v];
	lazy[v * 2] += lazy[v];
	t[v * 2 + 1] += lazy[v];
	lazy[v * 2 + 1] += lazy[v];
	lazy[v] = 0;
}
void update(ll v, ll tl, ll tr, ll l, ll r, ll addend)
{
	if (l > r)
		return;
	if (l == tl && tr == r)
	{
		t[v] += addend;
		lazy[v] += addend;
	}
	else
	{
		push(v);
		ll tm = (tl + tr) / 2;
		update(v * 2, tl, tm, l, min(r, tm), addend);
		update(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r, addend);
		t[v] = max(t[v * 2], t[v * 2 + 1]);
	}
}
ll query(ll v, ll tl,ll tr,ll l, ll r)
{
	if (l > r)
		return -INF;
	if (l == tl && tr == r)
		return t[v];
	push(v);
	ll tm = (tl + tr) / 2;
	return max(query(v * 2, tl, tm, l, min(r, tm)),
			   query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));
}
void solve()
{
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}