ll t[4 * N];
void build(ll v, ll tl, ll tr, vector<ll> &a)
{
   if (tl == tr)
   {
      t[v] = a[tl];
   }
   else
   {
      ll tm = (tl + tr) / 2;
      build(2 * v, tl, tm, a);
      build(2 * v + 1, tm + 1, tr, a);
      t[v] = max(t[2 * v], t[2 * v + 1]);
   }
}
ll get_first(ll v, ll tl, ll tr, ll l, ll r, ll x)
{
   if (tl > r || tr < l)
      return -1;

   if (l <= tl && r >= tr) // tl-tr is contained in l-r// important
   {
      ll lw = tl, hi = tr;
      while (lw != hi)
      {
         ll mid = (lw + hi) / 2;
         if (t[2 * v] > x)
         {
            hi = mid;
            v = 2 * v;
         }
         else
         {
            lw = mid + 1;
            v = 2 * v + 1;
         }
      }
      if (lw > tr || t[v] < x)
         return -1;
      return lw;
   }
   ll tm = (tl + tr) / 2;
   ll res = get_first(2 * v, tl, tm, l, r, x);
   if (res != -1)
      return res;
   return get_first(2 * v + 1, tm + 1, tr, l, r, x);
}