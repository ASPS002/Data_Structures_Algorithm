#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 200005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
vector<ll> t[4 * N];
void build(ll v, ll tl, ll tr, vector<ll> &a)
{ 

   if (tl == tr)
   {
      t[v] = {a[tl]};
   }
   else
   {
      ll tm = (tl + tr) / 2;
      build(2*v, tl, tm, a);
      build(2*v+1, tm + 1, tr, a);
      merge(t[2 * v].begin(), t[2 * v].end(), t[2 * v + 1].begin(), t[2 * v + 1].end(), back_inserter(t[v])); // 2- pointers approach to merge sorted arrays
      // each vertex stores the corresponding subarray in sorted order
      // since each element will come in logn segments therefore time complexity will be O(n*logn);
   }
}
ll query(ll v, ll tl, ll tr, ll l, ll r, ll val)
{
   if (l > r)
      return 1e9;
   if (l == tl && r == tr)
   { 
      auto pos = lower_bound(t[v].begin(), t[v].end(), val);// smallest element that is greater than or 
      // equal to val in the range l to r
      if (pos != t[v].end())
         return *pos;
      return 1e9;
   }
   ll tm = (tl + tr) / 2;
   return min(query(2 * v, tl, tm, l, min(tm, r), val),
              query(2 * v+1, tm+1, tr, max(tm + 1, l), r, val));
}
void solve()
{
   ll n;
   cin >> n;
   vector<ll> a(n);
   for (ll i = 0; i < n; i++)
   {
      cin >> a[i];
   }
   build(1, 0, n - 1, a);
   ll q;
   cin >> q;
   for (ll i = 0; i < q; i++)
   {
      ll l, r, x;
      cin >> l >> r >> x;
      cout << query(1, 0, n - 1, l, r, x) << endl;
   }
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}
