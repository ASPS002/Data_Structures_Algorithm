#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 11
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 3000005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
ll spf[N];
ll cnt[N];
void sieve()
{
   for (ll i = 1; i < N; i++)
   {
      spf[i] = i;
   }
   for (ll i = 2; i < N; i++)
   {
      if (spf[i] == i)
      {
         for (ll j = i; j < N; j += i)
         {
            if (spf[j] == j)
            {
               spf[j] = i;
            }
         }
      }
   }
}
void solve()
{
   ll n;
   cin >> n;
   ll ans = 1;
   for (ll i = 0; i < n; i++)
   {
      ll x, y;
      cin >> x >> y;
      ll p = spf[x];
      while (x != 1)
      {
         ll ct = 0;
         while (x % p == 0)
         {
            x /= p;
            ct++;
         }
         cnt[p] += (ct * y);
         cnt[p] %= mod;
         p = spf[x];
      }
   }
   for (ll i = 2; i < N; i++)
   {
      if (spf[i] == i && cnt[i] >= 1)
      {
         ll x = i;
         ll y = cnt[i];
         if (y % 2 == 0)
            y++;
         if (x != 1)
         {
            ll numval = ((power(x, y + 1, mod) - 1) % mod + mod) % mod;
            ll denval = power(x * x - 1, mod - 2, mod);
            ll tot = numval * denval;
            tot %= mod;
            ans *= tot;
            ans %= mod;
         }
      }
   }
   cout << ans << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   sieve();
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}
