#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 500005
#define N 500005
#define INF 1000000009
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
    ll res = 1;

    x = x % p;

    if (x == 0)
        return 0;
    while (y > 0)
    {

        if (y & 1)
            res = (res * x) % p;

        y = y >> 1;
        x = (x * x) % p;
    }

    return res;
}
ll gcd(ll a, ll b, ll &x, ll &y)
{
    if (b == 0)
    {
        x = 1;
        y = 0;
        return a;
    }
    ll x1, y1;
    ll d = gcd(b, a % b, x1, y1);
    x = y1;
    y = x1 - y1 * (a / b);
    return d;
}
bool find_any_solution(ll a, ll b, ll c, ll &x0, ll &y0, ll &g)
{
    g = gcd(abs(a), abs(b), x0, y0);
/*int x, y;
int g = extended_euclidean(a, m, x, y);
if (g != 1) {
    cout << "No solution!";
}
else {
    x = (x % m + m) % m;
    cout << x << endl;
}*/
//this part is modulo inverse
    if (c % g)
    {
        return false;
    }

    x0 *= c / g;
    y0 *= c / g;
    if (a < 0)
        x0 = -x0;
    if (b < 0)
        y0 = -y0;
    // cout << x0 << " " << y0 << endl;
    return true;
}

void solve()
{
    ll x;
    cin >> x;
    if (x % 11 == 0 || x % 111 == 0)
    {
        cout << "YES" << endl;
        return;
    }
    ll x0 = 0, y0 = 0, g = 0;
    if (find_any_solution(11, 111, x, x0, y0, g))
    {
        ll lw = -1e10, hi = 1e10;

        while (lw <= hi)
        {
            ll mid = (lw + hi) / 2;
            ll t = x0 + mid * (111 / g);
            if (t < 0)
            {
                lw = mid + 1;
            }
            else
            {
                hi = mid - 1;
            }
        }
        ll ans = x0 + lw * (111 / g); //minimum x>=0
        ll yy = y0 - lw * (11 / g);
        if (ans >= 0 && yy >= 0)
        {
            cout << "YES" << endl;
            return;
        }
    }
    cout << "NO" << endl;
    return;
}
int main()
{
    speed;
    ll kk;
    kk = 1;
    cin >> kk;
    while (kk--)
    {
        solve();
    }
}