//https://www.hackerearth.com/problem/algorithm/altered-primes/

#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 1000005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
ll cnt[N], vis[N], ans[N], spf[N];
void sieve()
{
   for (ll i = 1; i < N; i++)
   {
      spf[i] = i;
   }
   for (ll i = 2; i < N; i++)
   {
      for (ll j = 2 * i; j < N; j += i)
      {
         if (spf[j] == j)
         {
            spf[j] = i;
         }
      }
   }
}
void solve()
{
   ll n;
   cin >> n;
   vector<ll> a(n);
   for (ll i = 0; i < n; i++)
   {
      cin >> a[i];
      ll val = a[i];
      ll p = spf[val];
      ll new_val = 1;
      while (p != 1)
      {
         while (val % p == 0)
         {
            val /= p;
         }
         new_val *= p;
         p = spf[val];
      }
      vis[new_val] += 1;
   }
   for (ll i = 1; i < N; i++)
   {
      for (ll j = i; j < N; j += i)
      {
         cnt[i] += vis[j]; // add all elements to i whose gcd is a multiple of i
      }
      ans[i] = (cnt[i] * (cnt[i] - 1)) / 2; 
      // for pairs do ((cnt[i])*(cnt[i]-1))/2;
   }
   ll fans = 0;
   for (ll i = N - 1; i >= 1; i--)
   {
      for (ll j = 2 * i; j < N; j += i)
      {
         ans[i] -= ans[j]; // here we are trying to get all pairs such that there gcd is exactly i
         // that is we are subtracting all values whose gcd can be a multiple of i
      }
      if (spf[i] == i)
      {
         fans += ans[i]; // this means there gcd is exactly a prime number which means they have no more than one distinct prime in common
      }
   }
   cout << fans << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   sieve();
   // cin >> kk;
   while (kk--)
   {
      solve();
   }
}
