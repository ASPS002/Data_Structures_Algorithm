#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 100005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll a[10001];
ll top[10001], nxt[10001];
ll avail = 0;
void push(ll v, ll sn)
{
	if (avail == -1)
	{
		cout << "STACK OVERFLOW" << endl;
		return;
	}
	ll idx = avail;
	avail = nxt[idx];
	nxt[idx] = top[sn];
	top[sn] = idx;
	a[idx] = v;
}
ll pop(ll sn)
{
	if (top[sn] == -1)
	{
		cout << "STACK UNDERFLOW" << endl;
		return -1;
	}
	ll i = top[sn];
	top[sn] = nxt[i];
	nxt[i] = avail;
	avail = i;
	return a[i];
}
void solve()
{
	for (ll i = 0; i < 10000; i++)
	{
		nxt[i] = i + 1;
		top[i] = -1;
	}
	nxt[10000] = -1;
	top[10000] = -1;
	ll k = 3;
	// Let us put some items in stack number 2
	push(15, 2);
	push(45, 2);

	// Let us put some items in stack number 1
	push(17, 1);
	push(49, 1);
	push(39, 1);

	// Let us put some items in stack number 0
	push(11, 0);
	push(9, 0);
	push(7, 0);

	cout << "Popped element from stack 2 is " << pop(2) << endl;
	cout << "Popped element from stack 1 is " << pop(1) << endl;
	cout << "Popped element from stack 0 is " << pop(0) << endl;
	cout << "Popped element from stack 0 is " << pop(0) << endl;

	return ;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}