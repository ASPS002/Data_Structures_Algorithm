#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
vector<vector<ll>> up;
ll l, timer;
vector<ll> adj[N];
ll in[N], out[N];
void dfs(ll v, ll p, vector<vector<ll>> &up)
{
	in[v] = timer++;
	up[v][0] = p;
	for (ll i = 1; i <= l; i++)
	{
		up[v][i] = up[up[v][i - 1]][i - 1];
	}
	for (auto it : adj[v])
	{
		if (it != p)
		{
			dfs(it, v, up);
		}
	}
	out[v] = timer++;
}
bool is_ancestor(ll v, ll u)
{
	if (in[v] <= in[u] && out[v] >= out[u])
	{
		return 1;
	}
	return 0;
}
ll ancestor(ll v, ll u)
{
	if (is_ancestor(v, u))
		return v;
	if (is_ancestor(u, v))
		return u;

	for (ll i = l; i >= 0; i--)
	{
		if (!is_ancestor(up[u][i], v))
		{
			u = up[u][i];
		}
	}
	return up[u][0];
}
void solve()
{
	ll n;
	cin >> n;
	l = ceil(log2(n));
	up.assign(n, vector<ll>(l + 1));
	timer = 1;
	dfs(1, 1, up);
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}