#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;
 
	x = x % p;
 
	if (x == 0)
		return 0;
	while (y > 0)
	{
 
		if (y & 1)
			res = (res * x) % p;
 
		y = y >> 1;
		x = (x * x) % p;
	}
 
	return res;
}
vector<pll> adj[N];
vector<vector<ll>> dp;
void solve()
{
	ll n, m, k;
	cin >> n >> m >> k;
	dp.resize(n + 1, vector<ll>(k + 1, 1e18));
	for (ll i = 1; i <= m; i++)
	{
		ll x, y, w;
		cin >> x >> y >> w;
		adj[x].pb({y, w});
	}
	dp[1][0] = 0;
	multiset<pll> se;
	se.insert({0, 1});
	while (!se.empty())
	{
		pll p = *se.begin();
		ll d = p.first;
		ll v = p.second;
		se.erase(se.begin());
		if (d > dp[v][k - 1])
		{
			continue;
		}
		for (auto it : adj[v])
		{
			if (dp[it.first][k - 1] > it.second + d)
			{
 
				dp[it.first][k - 1] = it.second + d;
				se.insert({dp[it.first][k - 1], it.first});
				sort(dp[it.first].begin(), dp[it.first].end());
			}
		}
	}
	for (ll j = 0; j < k; j++)
	{
		cout << dp[n][j] << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}