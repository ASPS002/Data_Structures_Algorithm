#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
vector<ll> adj[N], tadj[N];
ll vis[N];
ll color[N], ans[N];
ll cnt = 1;
vector<ll> order, components;
void dfs(ll v, ll p)
{
	vis[v] = 1;
	for (auto it : adj[v])
	{
		if (!vis[it])
		{
			dfs(it, v);
		}
	}
	order.pb(v);
}
void dfs2(ll v, ll p)
{
	vis[v] = 1;
	for (auto it : tadj[v])
	{
		if (!vis[it])
		{
			dfs2(it, v);
		}
	}
	components.pb(v);
}
void solve()
{
	ll n, m;
	cin >> n >> m;
	for (ll i = 1; i <= m; i++)
	{
		ll x, y;
		cin >> x >> y;
		adj[x].pb(y);
		tadj[y].pb(x);
	}
	for (ll i = 1; i <= n; i++)
	{
		if (!vis[i])
		{
			dfs(i, -1);
		}
	}
	reverse(all(order));
	mem0(vis);

	for (ll i = 0; i < n; i++)
	{
		if (!vis[order[i]])
		{
			dfs2(order[i], -1);
			for (auto it : components)
			{
				ans[it] = cnt;
			}
			components.clear();
			cnt++;
		}
	}
	cout << cnt - 1 << endl;
	for (ll i = 1; i <= n; i++)
	{
		cout << ans[i] << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}