#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 1000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
class edge
{
	ll a, b, cost;

public:
	void solve()
	{
		ll n, m, v;
		cin >> n >> m >> v;
		v--;
		vector<ll> d(n, INF);
		d[v] = 0;
		vector<ll> p(n - 1);

		vector<edge> e(m);
		for (ll i = 0; i < m; i++)
		{
			ll x, y, cost;
			cin >> x >> y >> cost;
			x--, y--;
			e[i].a = x;
			e[i].b = y;
			e[i].cost = cost;
		}
		ll f = -1;
		for (ll i = 0; i < n; ++i)
		{
			f = -1;
			for (ll j = 0; j < m; ++j)
				if (d[e[j].a] < INF)
				{
					if (d[e[j].b] > d[e[j].a] + e[j].cost)
					{
						d[e[j].b] = max(-INF, d[e[j].a] + e[j].cost);
						p[e[j].b] = e[j].a;
						f = e[j].b;
					}
				}
			if (f == -1)
				break;
		}
		if (f == -1)
		{
			cout << "No negative cycle from " << v << endl;
			for (ll i = 0; i < n; i++)
			{
				cout << d[i] << " ";
			}
			cout << endl;
			return;
		}
		else
		{
			int y = f;
			// cout << f << endl;
			for (int i = 0; i < n; ++i) //iterating n times to come into the cycle
			{
				// cout << y << endl;
				y = p[y];
			}

			vector<int> path;
			for (int cur = y;; cur = p[cur])
			{
				path.push_back(cur);
				if (cur == y && path.size() > 1)
					break;
			}
			reverse(path.begin(), path.end());
			cout << path.size() << endl;
			cout << "Negative cycle: ";
			for (size_t i = 0; i < path.size(); ++i)
				cout << path[i] << ' ';
		}
	}
};

int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		edge obj;
		obj.solve();
	}
}