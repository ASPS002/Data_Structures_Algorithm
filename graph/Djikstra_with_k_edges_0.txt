//https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/practice-problems/algorithm/shortest-path-revisited-9e1091ea/
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
vector<pll> adj[N];
ll dp[N][20];
void solve()
{
	ll n, m, k;
	cin >> n >> m >> k;
	for (ll i = 1; i <= m; i++)
	{
		ll x, y, w;
		cin >> x >> y >> w;
		adj[x].pb({y, w});
		adj[y].pb({x, w});
	}
	for (ll i = 1; i <= n; i++)
	{
		for (ll j = 0; j <= k; j++)
			dp[i][j] = 1e18;
	}
	dp[1][0] = 0;
	set<pair<ll, pll>> se;

	se.insert({0, {1, 0}});

	while (!se.empty())
	{
		pair<ll, pll> p = *se.begin();
		ll v = p.second.first;
		ll used = p.second.second;
		ll d = p.first;
		se.erase(se.begin());
		for (auto it : adj[v])
		{
			if (used != k && dp[it.first][used + 1] > dp[v][used])
			{
				se.erase({dp[it.first][used + 1], {it.first, used + 1}});
				dp[it.first][used + 1] = dp[v][used];
				se.insert({dp[it.first][used + 1], {it.first, used + 1}});
			}
			if (dp[it.first][used] > dp[v][used] + it.second)
			{
				se.erase({dp[it.first][used], {it.first, used}});
				dp[it.first][used] = dp[v][used] + it.second;
				se.insert({dp[it.first][used], {it.first, used}});
			}
			if (used - 1 >= 0 && dp[it.first][used] > dp[v][used - 1])
			{
				se.erase({dp[it.first][used], {it.first, used}});
				dp[it.first][used] = dp[v][used - 1];
				se.insert({dp[it.first][used], {it.first, used}});
			}
		}
	}

	for (ll i = 1; i <= n; i++)
	{
		ll ans = 1e18;
		for (ll j = 0; j <= k; j++)
		{
			ans = min(ans, dp[i][j]);
		}
		cout << ans << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}