#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll in[N];
ll dp[N];
vector<ll> adj[N], tadj[N];
ll par[N];
void solve()
{
	ll n, m;
	cin >> n >> m;
	dp[1] = 1;
	par[1] = -1;
	for (ll i = 1; i <= m; i++)
	{
		ll x, y;
		cin >> x >> y;
		adj[x].pb(y);
		tadj[y].pb(x);
		in[y]++;
	}
	queue<ll> q;
	for (ll i = 1; i <= n; i++)
	{
		if (in[i] == 0)
		{
			q.push(i);
		}
	}
	while (!q.empty())
	{
		ll v = q.front();
		q.pop();
		for (auto it : adj[v])
		{
			in[it]--;
			if (in[it] == 0)
			{
				q.push(it);
			}
		}
		for (auto it : tadj[v])
		{
			if (dp[it])
			{
				dp[v] = max(dp[v], 1 + dp[it]);
				if (1 + dp[it] == dp[v])
				{
					if (v != 1)
					{
						par[v] = it;
					}
				}
			}
		}
	}
	if (dp[n])
	{
		vector<ll> ans;
		for (ll i = n; i != -1; i = par[i])
		{
			ans.pb(i);
		}
		reverse(all(ans));
		for (auto it : ans)
		{
			cout << it << " ";
		}
		cout << endl;
		return;
	}
	cout << "IMPOSSIBLE" << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}