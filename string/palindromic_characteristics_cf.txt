#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
void solve()
{
	string s;
	cin >> s;
	ll n = s.length();
	vector<ll> hs(n + 1), pw(n + 1), hs2(n + 1);
	ll p = 53;
	ll m = 1e9 + 7;
	pw[0] = 1;
	for (int i = 1; i <= n; i++)
		pw[i] = (pw[i - 1] * p) % m;
	for (ll i = 1; i <= n; i++)
	{
		hs[i] = (hs[i - 1] + ((s[i - 1] - 'a' + 1) * pw[i - 1]) % m);
		hs[i] %= m;
	}

	for (ll i = n - 1; i >= 0; i--)
	{
		hs2[i] = (hs2[i + 1] + ((s[i] - 'a' + 1) * pw[n - (i + 1)]) % m);
		hs2[i] %= m;
	}

	vector<vector<ll>> dp(n, vector<ll>(n, 0));
	vector<ll> cnt(n + 1);
	for (ll i = 0; i < n; i++)
	{
		for (ll j = i; j < n; j++)
		{
			if (i != j)
			{
				ll len = (j - i + 1);
				ll div = len / 2;
				ll lw, hi;
				lw = i + div - 1;
				if (len % 2 == 0)
				{
					hi = i + div;
				}
				else
				{
					hi = i + div + 1;
				}

				if ((((hs[lw + 1] - hs[i] + m) % m) * pw[n - i - 1]) % m == (((hs2[hi] - hs2[j + 1] + m) % m) * pw[j]) % m)
				{
					dp[i][j] = max(dp[i][j], 1 + dp[i][lw]);
				}
			}
			else
			{
				dp[i][j] = 1;
			}
			cnt[dp[i][j] + 1]--;
			cnt[0]++;
		}
	}

	for (ll i = 1; i <= n; i++)
		cnt[i] += cnt[i - 1];

	for (ll i = 1; i <= n; i++)
	{
		cout << cnt[i] << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}