#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
// #define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
//Given a list of n strings si, each no longer than m characters, find all the duplicate strings and divide them into groups.
long long compute_hash(string const &s) //rolling hash function
{
	ll p = 31;
	ll m = 1e9 + 9;
	ll hash_val = 0;
	ll pw = 1;
	for (auto it : s)
	{
		hash_val += ((it - 'a' + 1) * pw) % m;
		
		pw *= p;
		pw %= m;
	}
	return hash_val;
}
vector<vector<int>> group_identical_strings(vector<string> const &s)//O(mn+nlogn)
{
	ll n = s.size();
	vector<pair<ll, ll>> hashes(n);
	for (int i = 0; i < n; i++)
		hashes[i] = {compute_hash(s[i]), i};

	sort(hashes.begin(), hashes.end());

	vector<vector<ll>> groups;
	for (int i = 0; i < n; i++)
	{
		if (i == 0 || hashes[i].first != hashes[i - 1].first)
			groups.emplace_back();
		groups.back().push_back(hashes[i].second);
	}
	return groups;
}
void solve()
{
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}