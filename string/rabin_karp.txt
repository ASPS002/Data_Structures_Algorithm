//Given a list of n strings si, each no longer than m characters, find all the duplicate strings and divide them into groups.
long long compute_hash(string const &s) //rolling hash function
{
	ll p = 31;
	ll m = 1e9 + 9;
	ll hash_val = 0;
	ll pw = 1;
	for (auto it : s)
	{
		hash_val += ((it - 'a' + 1) * pw) % m;
		pw *= p;
		pw %= m;
	}
	return hash_val;
}
void rabin_karp(string s, string t)
{
	ll n = s.length();
	ll ml = t.length();
	vector<ll> hs(n);
	ll p = 31;
	ll m = 1e9 + 9;
	ll pw = 1;
	for (ll i = 0; i < n; i++)
	{
		if (i)
			hs[i] = (hs[i - 1] + ((s[i] - 'a' + 1) * pw) % m);
		else
			hs[i] = ((s[i] - 'a' + 1) * pw) % m;
		hs[i] %= m;
		pw *= p;
	}
	pw = 1;
	ll hash_val = 0;
	for (ll i = 0; i < ml; i++)
	{
		hash_val += ((t[i] - 'a' + 1) * pw) % m;
		hash_val %= m;
		pw *= p;
		pw %= m;
	}
	pw = 1;
	vector<ll> occurenses;
	for (ll i = 0; i <= n - ml; i++)
	{
		ll cur_hash;
		if (!i)
			cur_hash = (hs[i + ml - 1] + m) % m;
		else
			cur_hash = (hs[i + ml - 1] + m - hs[i - 1]) % m;

		if (cur_hash == (hash_val * pw) % m)
		{
			occurenses.pb(i);
		}
		pw *= 31;
	}
	for (auto it : occurenses)
	{
		cout << it << " ";
	}
}
void solve()
{
    rabin_karp("aabb", "aab");
}