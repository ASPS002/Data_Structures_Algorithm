#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll spt[N + 5][30];
ll spf[N];
ll vis[N];
void sieve()
{
	for (ll i = 1; i < N; i++)
	{
		spf[i] = i;
	}
	for (ll i = 2; i < N; i += 2)
	{
		spf[i] = 2;
	}
	for (ll i = 3; i * i < N; i++)
	{
		if (spf[i] == i)
		{
			for (ll j = i * i; j < N; j += i)
			{
				if (spf[j] == j)
				{
					spf[j] = i;
				}
			}
		}
	}
}
void solve()
{
	ll n, q;
	cin >> n >> q;
	vector<ll> a(n), b(n);
	for (ll i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	for (ll i = 0; i <= n; i++)
	{
		for (ll j = 0; j < 30; j++)
		{
			spt[i][j] = 0;
		}
	}
	for (ll i = 1; i < N; i++)
	{
		vis[i] = n;
	}
	for (ll i = n - 1; i >= 0; i--)
	{
		ll tmp = a[i];
		ll pr = spf[tmp];
		ll mn = n;
		while (tmp > 1)
		{
			pr = spf[tmp];
			while (tmp % pr == 0)
			{
				tmp /= pr;
			}
			mn = min(mn, vis[pr]);
			vis[pr] = i;
		}
		if (i + 1 < n)
			b[i] = min(mn, b[i + 1]);
		else
			b[i] = mn;
	}
	for (ll i = 0; i < n; i++)
	{
		spt[i][0] = b[i];
	}
	for (ll j = 1; j < 30; j++)//2^j is number of segments
	{
		for (ll i = 0; i < n; i++)
		{
			if (spt[i][j - 1] < n)
			{
				spt[i][j] = spt[spt[i][j - 1]][j - 1];
			}
			else
			{
				spt[i][j] = n;
			}
		}
	}
	for (ll i = 1; i <= q; i++)
	{
		ll l, r;
		cin >> l >> r;
		l--, r--;
		ll ans = 0;
		for (ll j = 29; j >= 0; j--)
		{
			if (spt[l][j] <= r)
			{
				l = spt[l][j];
				ans += (1 << j);
			}
			if (l >= r)
				break;
		}
		cout << ans + 1 << endl;
	}
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	sieve();
	while (kk--)
	{
		solve();
	}
}