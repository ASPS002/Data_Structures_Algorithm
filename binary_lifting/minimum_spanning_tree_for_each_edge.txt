#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 400005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll par[N], rnk[N];
vector<pll> adj[N];
ll up[N][25], ance[N][25];
ll intime[N], outtime[N];
ll timer = 1;
void dfs(ll v, ll p, ll w)
{
	up[v][0] = w;
	ance[v][0] = p;
	intime[v] = timer++;
	for (ll i = 1; i < 25; i++)
	{
		ance[v][i] = ance[ance[v][i - 1]][i - 1];
		up[v][i] = max(up[v][i - 1], up[ance[v][i - 1]][i - 1]);
	}
	for (auto it : adj[v])
	{
		if (it.ff != p)
		{
			dfs(it.ff, v, it.ss);
		}
	}
	outtime[v] = timer++;
	return;
}
bool isances(ll u, ll v)
{
	if (intime[u] <= intime[v] && outtime[u] >= outtime[v])
	{
		return 1;
	}
	return 0;
}
void makeset(ll v)
{
	par[v] = v;
	rnk[v] = 1;
}
ll fndset(ll v)
{
	if (par[v] == v)
		return v;

	return par[v] = fndset(par[v]);
}
void makeuni(ll x, ll y)
{
	ll a = fndset(x);
	ll b = fndset(y);
	if (a != b)
	{
		if (rnk[b] > rnk[a])
			swap(a, b);
		par[b] = a;
		rnk[a] += rnk[b];
	}
}
void solve()
{
	ll n, m;
	cin >> n >> m;
	vector<pair<pll, pll>> vp, tvp;
	vector<ll> ans(m);
	for (ll i = 1; i <= m; i++)
	{
		ll x, y, w;
		cin >> x >> y >> w;
		vp.pb({{w, i - 1}, {x, y}});
	}
	for (ll i = 1; i <= n; i++)
	{
		makeset(i);
	}
	for (ll i = 0; i < 25; i++)
		up[0][i] = 0;
	sort(all(vp));
	ll sum = 0;
	ll idx = -1;
	for (ll i = 0; i < m; i++)
	{
		ll u = vp[i].ss.ff;
		ll v = vp[i].ss.ss;
		ll w = vp[i].ff.ff;
		ll id = vp[i].ff.ss;
		if (fndset(u) != fndset(v))
		{
			makeuni(u, v);
			sum += w;
			adj[u].pb({v, w});
			adj[v].pb({u, w});
			idx = u;
		}
		else
		{
			tvp.pb({{w, id}, {u, v}});
		}
	}
	for (ll i = 0; i < m; i++)
		ans[i] = sum;
	for (auto it : tvp)
	{
		ll id = it.ff.ss;
		ans[id] = 0;
	}

	dfs(idx, idx, 0);
	for (ll i = 0; i < tvp.size(); i++)
	{
		ll u = tvp[i].ss.ff;
		ll v = tvp[i].ss.ss;
		ll w = tvp[i].ff.ff;
		ll id = tvp[i].ff.ss;
		ll tu = u;
		ll lca = idx;
		if (isances(u, v))
		{
			lca = u;
		}
		else if (isances(v, u))
		{
			lca = v;
		}
		else
		{
			for (ll j = 24; j >= 0; j--)
			{
				if (!isances(ance[u][j], v))
				{
					u = ance[u][j];
				}
			}
			u = ance[u][0];
			lca = u;
		}
		u = tu;

		ll mx = 0;
		for (ll j = 24; j >= 0; j--)
		{
			if (!isances(ance[u][j], lca))
			{
				mx = max(mx, up[u][j]);
				u = ance[u][j];
			}
		}
		if (u != lca)
		{
			mx = max(mx, up[u][0]);
		}
		u = tu;

		for (ll j = 24; j >= 0; j--)
		{
			if (!isances(ance[v][j], lca))
			{
				mx = max(mx, up[v][j]);
				v = ance[v][j];
			}
		}
		if (v != lca)
		{
			mx = max(mx, up[v][0]);
		}
		ans[id] = sum - mx + w;
	}
	for (ll i = 0; i < m; i++)
	{
		cout << ans[i] << endl;
	}
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}