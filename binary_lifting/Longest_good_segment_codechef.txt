#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 200005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
ll spt[N + 5][30];
void solve()
{
	ll n, k, s;
	cin >> n >> k >> s;
	vector<ll> a(n);
	for (ll i = 0; i < n; i++)
	{
		cin >> a[i];
		if (i)
			a[i] += a[i - 1];
	}

	for (ll i = 0; i <= n; i++)
	{
		for (ll j = 0; j < 30; j++)
		{
			spt[i][j] = 0;
		}
	}
	for (ll i = 0; i < n; i++)
	{
		if (i)
		{
			auto it = upper_bound(all(a), a[i - 1] + s);

			if (it != a.begin())
				it--;
			spt[i][0] = it - a.begin();
			spt[i][0]++;
		}
		else
		{
			auto it = upper_bound(all(a), s);

			it--;

			spt[i][0] = it - a.begin();
			spt[i][0]++;
		}
	}

	for (ll j = 1; j < 30; j++)
	{
		for (ll i = 0; i < n; i++)
		{
			if (spt[i][j - 1] < n && spt[i][j - 1] >= 0)
			{
				spt[i][j] = spt[spt[i][j - 1]][j - 1];
			}
			else
			{
				spt[i][j] = n;
			}
		}
	}
	ll ans = -1e10;
	for (ll i = 0; i < n; i++)
	{
		ll tmp = i;
		ll tot = 0;
		ll tk = k;
		for (ll j = 29; j >= 0; j--)
		{
			if ((1ll << j) <= tk && tk > 0)
			{
				tk -= (1ll << j);
				tot += (spt[tmp][j] - tmp);
				tmp = spt[tmp][j];
			}
			if (tmp >= n)
				break;
		}
		ans = max(ans, tot);
	}
	cout << ans << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}