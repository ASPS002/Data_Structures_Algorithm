n*m matrix which contains coin in each cell. also at time k the coins value is multliplied by k.

you start at cell 0,0 . you have to collect all coins and visit all cells at most 1. what is the maximum no of coins you can collect.

eg n=4
1 4 3 2
2 1 3 2
ans=77


#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                    \
   ios_base::sync_with_stdio(0); \
   cin.tie(0);                   \
   cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 500005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
   ll res = 1;

   x = x % p;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x) % p;

      y = y >> 1;
      x = (x * x) % p;
   }

   return res;
}
ll powernm(ll x, ll y)
{
   ll res = 1;

   if (x == 0)
      return 0;
   while (y > 0)
   {

      if (y & 1)
         res = (res * x);

      y = y >> 1;
      x = (x * x);
   }

   return res;
}
void solve()
{
   ll n;
   cin >> n;
   vector<vector<ll>> v;
   vector<ll> tmp;
   v.pb(tmp);
   v.pb(tmp);
   for (ll i = 0; i < 2; i++)
   {
      for (ll j = 0; j < n; j++)
      {
         ll x;
         cin >> x;
         v[i].pb(x);
      }
   }
   ll mxval = n * 2 - 1;
   ll dp[2][n + 1];
   ll sum[2][n + 1];
   mem0(dp);
   mem0(sum);
   ll curval;
   ll totsum = 0;
   for (ll i = n - 1; i >= 0; i--)
   {
      curval = (i)*2;

      if (i % 2)
      {
         // up cell
         dp[0][i] = dp[0][i + 1] + (curval + 1) * v[0][i];

         // down cell
         dp[1][i] = max(dp[1][i], dp[0][i] + curval * v[1][i]);
         dp[1][i] = max(dp[1][i], curval * v[1][i] + mxval * v[0][i] + sum[1][i + 1] - totsum);
      }
      else
      {
         // down cell
         dp[1][i] = dp[1][i + 1] + (curval + 1) * v[1][i];

         // up cell
         dp[0][i] = max(dp[0][i], dp[1][i] + curval * v[0][i]);
         dp[0][i] = max(dp[0][i], curval * v[0][i] + mxval * v[1][i] + sum[0][i + 1] - totsum);
      }
      // cout << dp[1][1] << " " << dp[1][3] << " " << sum[1][n] << " " << totsum << endl;
      sum[0][i] = sum[0][i + 1] - totsum + curval * v[0][i] + mxval * v[1][i];
      sum[1][i] = sum[1][i + 1] - totsum + curval * v[1][i] + mxval * v[0][i];
      totsum += v[0][i];
      totsum += v[1][i];
   }
   cout << dp[0][0] << endl;
   return;
}
int main()
{
   speed;
   ll kk;
   kk = 1;
   cin >> kk;
   while (kk--)
   {
      solve();
   }
}
