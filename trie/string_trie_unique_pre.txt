#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 20005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
struct Node
{
	ll cnt;
	Node *ptr[26];
	Node()
	{
		cnt = 0;
		for (ll i = 0; i < 26; i++)
		{
			ptr[i] = NULL;
		}
	}
};
void insert(string &s, Node *root)
{
	for (ll i = 0; i < s.length(); i++)
	{
		ll val = s[i] - 'a';
		if (root->ptr[val] == NULL)
		{
			root->ptr[val] = new Node;
			root = root->ptr[val];
			root->cnt += 1;
		}
		else
		{
			root = root->ptr[val];
			root->cnt += 1;
		}
	}
}
void check(string &s, ll &len, Node *root)
{
	for (ll i = 0; i < s.length(); i++)
	{
		ll val = s[i] - 'a';
		if (root->ptr[val]->cnt == 1)
		{
			len++;
			return;
		}
		root = root->ptr[val];
		len++;
	}
}
void solve()
{
	vector<string> v;
	ll n;
	cin >> n;
	Node *root = new Node;
	for (ll i = 0; i < n; i++)
	{
		string s;
		cin >> s;
		v.push_back(s);
	}
	for (auto it : v)
	{
		insert(it, root);
	}
	vector<string> ans;
	for (ll i = 0; i < n; i++)
	{
		ll len = 0;
		check(v[i], len, root);
		ans.push_back(v[i].substr(0, len));
	}
	for (auto it : ans)
	{
		cout << it << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	// cin >> kk;
	while (kk--)
	{
		solve();
	}
}