#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 500005
#define INF 10000000000000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
    ll res = 1;

    x = x % p;

    if (x == 0)
        return 0;
    while (y > 0)
    {

        if (y & 1)
            res = (res * x) % p;

        y = y >> 1;
        x = (x * x) % p;
    }

    return res;
}
struct Node
{
    int data;
    Node *left, *right;
    Node(int val) : data(val), left(NULL), right(NULL) {}
};
void maketrie(Node *head, ll val)
{
    for (ll i = 63; i >= 0; i--)
    {

        if (val & (1ll << i))
        {
            if (head->right != NULL)
            {
                head = head->right;
            }
            else
            {
                head->right = new Node(1);
                head = head->right;
            }
        }
        else
        {
            if (head->left != NULL)
            {
                head = head->left;
            }
            else
            {
                head->left = new Node(1);
                head = head->left;
            }
        }
    }
}
ll triemax(Node *head, ll val, ll position)
{
    if (position < 0)
        return 0;
    ll ans = 0;
    if (val & (1ll << position))
    {
        if (head->left != NULL)
        {
            ans += (1ll << position) + triemax(head->left, val, position - 1);
        }
        else
        {
            ans += triemax(head->right, val, position - 1);
        }
    }
    else
    {
        if (head->right != NULL)
        {
            ans += (1ll << position) + triemax(head->right, val, position - 1);
        }
        else
        {
            ans += triemax(head->left, val, position - 1);
        }
    }
    return ans;
}
void solve()
{
    int n;
    cin >> n;
    vector<ll> a(n);
    Node *head = new Node(0);
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }
    for (ll i = 0; i < n; i++)
    {
        maketrie(head, a[i]);
    }
    ll ans = -1e18;
    for (ll i = 0; i < n; i++)
    {
        ans = max(ans, triemax(head, a[i], 63));
    }
    cout << ans << endl;
    return;
}
int main()
{
    speed;
    ll kk;
    kk = 1;
    // cin >> kk;
    while (kk--)
    {
        solve();
    }
}