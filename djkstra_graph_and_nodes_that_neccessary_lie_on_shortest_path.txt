// https://cses.fi/problemset/task/1203/
// very imp problem
#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
    ios_base::sync_with_stdio(0); \
    cin.tie(0);                   \
    cout.tie(0);
#define ll long long
#define ld long double
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 10000005
#define N 300005
#define K 35
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
    ll res = 1;

    x = x % p;

    if (x == 0)
        return 0;
    while (y > 0)
    {

        if (y & 1)
            res = (res * x) % p;

        y = y >> 1;
        x = (x * x) % p;
    }

    return res;
}
ll powernm(ll x, ll y)
{
    ll res = 1;

    if (x == 0)
        return 0;
    while (y > 0)
    {

        if (y & 1)
            res = (res * x);

        y = y >> 1;
        x = (x * x);
    }
    return res;
}
vector<pll> adj[N];
vector<ll> edges[N];
vector<ll> adj2[N];
set<ll> ans;
ll tin[N], tout[N], low[N];
ll vis[N];
ll timer = 0;
void dfs(ll v, ll p)// finding articulation points in a directed acyclic graph is same as undirected graph
{
    tin[v] = timer++;
    low[v] = tin[v];
    for (auto it : adj2[v])
    {
        if (it == p)
            continue;
        if (!vis[it])
        {
            vis[it] = 1;
            dfs(it, v);
            low[v] = min(low[v], low[it]);
            if (tin[v] <= low[it])
            {
                ans.insert(v);
            }
        }
        else
        {
            low[v] = min(low[v], tin[it]);
        }
    }
    tout[v] = timer++;
}
void solve()
{
    ll n, m;
    cin >> n >> m;
    for (ll i = 1; i <= m; i++)
    {
        ll x, y, w;
        cin >> x >> y >> w;
        adj[x].pb({y, w});
    }
    set<pll> se;
    se.insert({0, 1});

    vector<ll> d(n + 1, 1e17);
    d[1] = 0;
    while (se.size())
    {
        auto it = *se.begin();
        ll u = it.ss;
        ll dis = it.ff;
        se.erase(se.begin());
        for (auto it : adj[u])
        {
            ll v = it.ff;
            ll w = it.ss;
            if (d[v] > d[u] + w)
            {
                edges[v].clear();
                if (se.find({d[v], v}) != se.end())
                {
                    se.erase({d[v], v});
                }
                edges[v].pb(u);
                d[v] = d[u] + w;
                se.insert({d[v], v});
            }
            else if (d[v] == d[u] + w)
            {
                edges[v].pb(u);
            }
        }
    }
    set<ll> se2;
    se2.insert(n);
    vector<ll> visn(n + 1, 0);
    visn[n] = 1;
    // graph containing only edges that are in shortest path from source to destination
    // djikstra graph
    while (se2.size())
    {
        set<ll> tmp;
        for (auto des : se2)
        {
            for (auto it : edges[des])
            {
                if (!visn[it])
                {
                    visn[it] = 1;
                    tmp.insert(it);
                }
                adj2[it].pb(des);// original edge from it to des only
                adj2[des].pb(it);
            }
        }
        se2 = tmp;
    }
    vis[1] = 1;
    dfs(1, -1);
    ans.insert(n);
    cout << ans.size() << endl;
    for (auto it : ans)
    {
        cout << it << " ";
    }
    cout << endl;
    return;
}
int main()
{
    speed;
    ll kk;
    kk = 1;
    // cin >> kk;
    while (kk--)
    {
        solve();
    }
}