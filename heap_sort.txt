#include <bits/stdc++.h>
#include <iostream>
using namespace std;
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
#define speed                     \
	ios_base::sync_with_stdio(0); \
	cin.tie(0);                   \
	cout.tie(0);
#define ll long long
#define pb push_back
#define mem1(a) memset(a, -1, sizeof(a))
#define mem0(a) memset(a, 0, sizeof(a))
#define setp(x) fixed << setprecision(x)
#define endl "\n"
#define mod 1000000007
#define mod1 998244353
#define ff first
#define ss second
#define MAX 100005
#define N 4000005
#define INF 10000000
#define all(v) v.begin(), v.end()
#define sbit(a) __builtin_popcount(a)
template <typename T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;
typedef pair<ll, ll> pll;
typedef pair<pll, ll> ppl;
typedef map<ll, ll> mpll;
typedef map<vector<ll>, ll> mpvl;
ll power(ll x, ll y, ll p)
{
	ll res = 1;

	x = x % p;

	if (x == 0)
		return 0;
	while (y > 0)
	{

		if (y & 1)
			res = (res * x) % p;

		y = y >> 1;
		x = (x * x) % p;
	}

	return res;
}
void heapify(vector<ll> &a, ll idx, ll n)
{
	ll largest = a[idx];
	ll lidx = -1;
	if (2 * idx < n && a[2 * idx] > largest)
	{
		largest = a[2 * idx];
		lidx = 2 * idx;
	}

	if (2 * idx + 1 < n && a[2 * idx + 1] > largest)
	{
		largest = a[2 * idx] + 1;
		lidx = 2 * idx + 1;
	}
	if (lidx == -1)
		return;
	swap(a[idx], a[lidx]);
	heapify(a, lidx, n);
}
void solve()
{
	ll n;
	cin >> n;
	vector<ll> a(n);
	for (ll i = 0; i < n; i++)
	{
		cin >> a[i];
	}
	for (ll i = n / 2 - 1; i >= 0; i--)
	{
		heapify(a, i, n - 1);
	}
	swap(a[0], a[n - 1]);
	heapify(a, 0, n - 1);
	ll end = n - 2;
	while(end>0)
	{
		swap(a[0], a[end--]);
		heapify(a, 0, end + 1);
	}
	for (ll i = 0; i < n; i++)
	{
		cout << a[i] << " ";
	}
	cout << endl;
	return;
}
int main()
{
	speed;
	ll kk;
	kk = 1;
	cin >> kk;
	while (kk--)
	{
		solve();
	}
}